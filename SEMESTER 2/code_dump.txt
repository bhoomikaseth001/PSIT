
                                   LECTURE14                                    
                            BasicVectorOperation.cpp                            

//BASIC VECTOR OPERATIONS
#include<iostream>
#include<vector>
using namespace std;
int main() { 
vector<int> num{100,200,300,400,500};
cout<<"Initial Vector : ";
for(const int &i : num){
    cout<<i<<" ";
}

num.push_back(600);
num.push_back(700);
cout<<"\nUpdated Vector : ";

for(const int &i : num){
    cout<<i<<" ";
}
cout<<endl<<"$IMPORTANT FUNCTION PRESENT IN VECTOR"<<endl;
cout<<"Size: "<<num.size()<<endl;
cout<<"Capacity: "<<num.capacity()<<endl;
cout<<"First element: "<<num.front()<<endl;
cout<<"last element: "<<num.back()<<endl;
num.resize(10);
cout<<"After resize to 3, size is"<<num.size()<<endl;
cout<<"Last element: "<<num.back()<<endl;
num.insert(num.begin(),50);
cout<<"After insert at beginning, first element is: "<<num.front()<<endl;;
num.erase(num.begin()+2);
cout<<"After erase at index 1, size is: "<<num.size()<<endl;

num.clear();
cout<<"After clear, size is : "<<num.size()<<endl;
return 0;
}


                                   LECTURE14                                    
                              creationofvector.cpp                              

#include<iostream>
#include<vector>
using namespace std;
int main() { 
vector<int> M={11,12,13,14,15};
vector<int> N{6,7,8,9,10};
vector<int> O(5,12);
cout <<"vetor1 =";
for(const int & i :M){
    cout << i<<" ";
}
cout<<endl;
cout <<"vetor2 =";
for(const int & i :N){
    cout << i<<" ";
}
cout<<endl;
cout <<"vetor3 =";
for(const int & i :O){
    cout << i<<" ";
}
cout<<endl;
return 0;
}


                                   LECTURE16                                    
                                Leetcode729.cpp                                 

//LEETCODE PROBLEM 729
#include<iostream>
#include<vector>
#include<utility>
using namespace std;
int main() { 
 class MyCalendar {
    private:
    vector<pair<int,int>>bookings;
public:
    MyCalendar() {

    }
    
    bool book(int start, int end) {
        for(const auto & booking:bookings)
        {
            if(max(booking.first,start) < min(booking.second,end))
                 return false;
}
    bookings.emplace_back(start,end);
    return true;    
    }
};
}


                                   LECTURE16                                    
                             MatrixRotateVector.cpp                             

//WAP in CPP to rotate a matrix using vectors
#include<iostream>
#include<vector>
#include<utility>
using namespace std;
int main() { 
    int n;
    cout<<"Enter the size : ";
    cin>>n;
    vector<vector<int>>matrix(n,vector<int>(n));
    vector<vector<int>>mat(n,vector<int>(n));
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<"Enter value for matrix at ["<<i<<"]["<<j<<"] : ";
            cin>>matrix[i][j];

        }
    }
    printf("\nMatrix after 90 degree rotation\n");
    for (int i=0;i<=n-1;i++){
        for (int j=n-1;j>=0;j--){
           cout<<matrix[j][i]<<" ";
            mat[i][j]=matrix[j][i];
        }
        cout<<endl;
    }
return 0;
}
/*OUTPUT
Enter the size : 3
Enter value for matrix at [0][0] : 1
Enter value for matrix at [0][1] : 2
Enter value for matrix at [0][2] : 3
Enter value for matrix at [1][0] : 4
Enter value for matrix at [1][1] : 5
Enter value for matrix at [1][2] : 6
Enter value for matrix at [2][0] : 7
Enter value for matrix at [2][1] : 8
Enter value for matrix at [2][2] : 9

Matrix after 90 degree rotation
7 4 1
8 5 2
9 6 3   */


                                   LECTURE16                                    
                                   median.cpp                                   

//WAP in CPP to find median of a matrix
#include<iostream>
#include<vector>
#include<utility>
using namespace std;
int main() { 
    int n,mid;
    float median;
    cout<<"Enter the size : ";
    cin>>n;
vector<int>vec(n);
cout<<"Enter the elements : ";
for(int i=0;i<n;i++)
    cin>>vec.at(i);

for(int i=0;i<n-1;i++){
    for(int j=0;j<n-i-1;j++){
        if(vec.at(j)>vec.at(j+1))
            swap(vec.at(j),vec.at(j+1));
    }
}
cout<<"Sorted Elements : ";
for(int i=0;i<n;i++)
    cout<<vec.at(i)<<" ";
cout<<endl;

if(n%2==0)
median=(vec.at(n/2)+vec.at((n/2)-1))/2.0;
else
median=vec.at(((n-1)/2));
cout<<median<<endl;
return 0;
}
/*OUTPUT
Enter the size : 6
Enter the elements : 4 3 2 5 6 1
Sorted Elements : 1 2 3 4 5 6 
3.5

Enter the size : 5
Enter the elements : 3 4 2 1 5
Sorted Elements : 1 2 3 4 5
3   */


                                   LECTURE16                                    
                                  smaller.cpp                                   

//WAP in CPP that returns the elemen in a vector that are strictly smaller than their adjacent left & right neighbour

#include<iostream>
#include<vector>
#include<utility>
using namespace std;
int main() { 
 vector<int>vec={2,1,4,3,5,0,6};
// for(const int &i : vec){
    for(int i = 1; i < vec.size() - 1; i++){
    //if(vec[i-1]>vec[i] && vec[i+1]>vec[i])
    if((vec.at(i-1)>vec.at(i)) && (vec.at(i+1)>vec.at(i)))
        cout<<vec.at(i)<<" ";
 }
return 0;
}
/*OUTPUT
  1 3 0  */


                                   LECTURE16                                    
                                    swap.cpp                                    

//Swap content of 2 vectors
#include<iostream>
#include<vector>
#include<utility>
using namespace std;
int main() { 
    vector<int>vec1={100,200,300,400,500};
    vector<int>vec2={10,20,30,40,50};

    cout<<"Before swap : "<<endl;
    cout<<"Vector 1: ";
    for(int val:vec1)
        cout<<val<<" ";
    cout<<endl;
    cout<<"Vector 2: ";
    for(int val:vec2)
        cout<<val<<" ";
    cout<<endl;

    //vec1.swap(vec2);
    swap(vec1,vec2);

    cout<<"After swap : "<<endl;
    cout<<"Vector 1: ";
    for(int val:vec1)
        cout<<val<<" ";
    cout<<endl;
    cout<<"Vector 2: ";
    for(int val:vec2)
        cout<<val<<" ";
    cout<<endl;
return 0;
}

/*OUTPUT
Before swap : 
Vector 1: 100 200 300 400 500 
Vector 2: 10 20 30 40 50      
After swap : 
Vector 1: 10 20 30 40 50      
Vector 2: 100 200 300 400 500  */

